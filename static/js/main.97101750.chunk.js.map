{"version":3,"sources":["Components/AddNewTask/add.png","Components/AddNewTask/AddNewTask.jsx","Components/TasksCategory/TasksCategory.jsx","Components/Task/Task.jsx","Components/UserModal/UserModal.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddNewTask","useState","formVisible","isFormVisible","Fragment","id","onClick","action","className","htmlFor","type","name","tabIndex","required","minLength","maxLength","placeholder","src","add","alt","cols","rows","TasksCategory","props","categorytitle","task","Task","taskname","tasktime","tasketc","taskdesc","UserModal","sendUsername","username","updateusername","JSONgetted","updateJSON","useEffect","fetchData","a","fetch","res","json","method","onSubmit","usersMatch","Object","values","HandleShowModal","alert","AccessFlow","onChange","event","target","value","App","Modal","ShowModal","updateUsername","actualTasks","updateActualTasks","nextTasks","updateNextTasks","expiredTasks","updateExpiredTasks","FilterPerCategory","userCards","today","Date","actualHour","getHours","actualMinutes","getMinutes","ActualTime","parseInt","toString","ETCTime","forEach","element","entries","property","ArrayTaskTimeArray","split","TaskTimeInNumber","ShowTasksNext","ShowTasksActual","ShowTasksExpired","card","short_desc","starting_time","etc","notes","console","log","recievedJSON","cards","username_card","cardPreset","card_id","actual_status","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97101750.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/add.a0162b51.png\";","import React, {useState, useEffect}  from 'react';\r\nimport './AddNewTask.css';\r\nimport add from './add.png'\r\n\r\nexport const AddNewTask = () => {\r\n    const [formVisible, isFormVisible] = useState(\"form-hide\");\r\n\r\n    const HandleFormVisibility = () => {\r\n        if(formVisible === \"form-hide\") isFormVisible(formVisible => \"form-show\");\r\n        else isFormVisible(formVisible => \"form-hide\")\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <section id=\"newtask-section\">\r\n                <p onClick={() => HandleFormVisibility()}>Add New Task</p>\r\n                <form action=\"\" id=\"task-form\" className={formVisible}>\r\n                    <label htmlFor=\"taskname\">Task Name:</label>\r\n                    <input type=\"text\" name=\"taskname\" id=\"taskname-id\" tabIndex=\"1\" required=\"required\" minLength=\"1\" maxLength=\"50\" placeholder=\"Take out the dog\"/>\r\n                    <label htmlFor=\"taskdate\">Starts:</label>\r\n                    <input type=\"datetime-local\" name=\"taskdate\" id=\"tasktime-id\" tabIndex=\"2\" required=\"required\"/>\r\n                    <label htmlFor=\"tasktime\">ETC:</label>\r\n                    <input type=\"time\" name=\"tasktime\" id=\"tasktime-id\" tabIndex=\"3\" required=\"required\"/>\r\n                    <button><img src={add} alt=\"Add New Task\" tabIndex=\"5\"/></button> <br />\r\n                    <label htmlFor=\"taskdesc\" id=\"textarea-label\">Short Description:</label>\r\n                    <textarea name=\"taskdesc\" id=\"taskdesc-id\" cols=\"70\" rows=\"4\" tabIndex=\"4\" maxLength=\"250\" placeholder=\"Get my water bottle. Make sure to have the food in the bag. Don't forget...\"></textarea>\r\n                </form>\r\n            </section>\r\n        </React.Fragment>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default AddNewTask;","import React, { useState } from \"react\";\r\nimport './TasksCategory.css'\r\n\r\nexport const TasksCategory = (props) => {\r\n    const [profileState, setProfileState] = useState(props)\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <section id=\"nexttasksection-id\">\r\n                <h2>{props.categorytitle}</h2>\r\n                {props.task}\r\n            </section>\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default TasksCategory;","import React, {useState, useEffect} from \"react\";\r\nimport './Task.css';\r\n\r\n\r\n\r\nexport const Task = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <article id=\"taskarticle-id\">\r\n                <p>{props.taskname}</p><br /> {/*Task's title*/}\r\n                <p>{props.tasktime}</p>  {/*Task's time*/}\r\n                <p>ETC: {props.tasketc}</p>  {/*Task's ETC*/}\r\n                <p>Remaining Time: 0</p>  {/*Task's Remaining time*/}   \r\n                <p>{props.taskdesc}</p>  {/*Task's short desc*/}\r\n            </article>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Task;","import React, { useState, useEffect } from \"react\";\r\nimport AddNewTask from \"../AddNewTask/AddNewTask\";\r\nimport './UserModal.css';\r\n\r\nexport const UserModal = (props, {sendUsername}) => {\r\n    const [username,updateusername ] = useState(\"\")     \r\n    const [JSONgetted, updateJSON] = useState({});\r\n\r\n\r\n      useEffect(() => { //get Users JSON\r\n        const fetchData = async () => {\r\n          const res = await fetch(\r\n            \"https://api.npoint.io/06ad77bde85ea10608b5\",\r\n          );\r\n          const json = await res.json();\r\n          updateJSON(json);\r\n        };\r\n        fetchData();\r\n      },[]);\r\n\r\n\r\n    const CloseModal = () => {\r\n        props.HandleShowModal();\r\n    }\r\n\r\n    const AccessFlow = () => {\r\n        //Manage all the Access Flow != Manage Register Flow\r\n        let usersMatch = 0;\r\n        for(let values of Object.values(JSONgetted)){\r\n            if(values.username === username){\r\n                CloseModal();\r\n                props.sendUsername(username, JSONgetted);\r\n                usersMatch++;\r\n            } \r\n        }\r\n\r\n        if (usersMatch === 0) alert(\"Usuario no encontrado!\")\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <section id=\"usermodalsection-id\">\r\n                <form action=\"\" method=\"post\" id=\"currentuser-id\" onSubmit={() => {AccessFlow()}}>\r\n                    <label htmlFor=\"username\">Username:</label>\r\n                    <input type=\"text\" name=\"username\" id=\"username-id\" required=\"required\" minLength=\"8\" maxLength=\"20\" onChange={(event) => updateusername(event.target.value)}/> <br/>\r\n                    <button id=\"accessbutton-id\">Access</button>\r\n                </form>\r\n                <form action=\"\" id=\"newuser-id\">\r\n                    <label htmlFor=\"newusername\">New Username:</label>\r\n                    <input type=\"text\" name=\"newusername\" id=\"newusername-id\" required=\"required\" minLength=\"8\" maxLength=\"20\"/> <br/>\r\n                    <button id=\"registerbutton-id\">Register</button>\r\n                </form>\r\n            </section>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default UserModal;","import './App.css';\r\nimport React from 'react';\r\nimport AddNewTask from './Components/AddNewTask/AddNewTask';\r\nimport TasksCategory from './Components/TasksCategory/TasksCategory';\r\nimport Task from './Components/Task/Task';\r\nimport UserModal from './Components/UserModal/UserModal';\r\nimport { useEffect, useState } from 'react';\r\n\r\n\r\nconst App = (props) => {\r\n  \r\n  const [Modal, ShowModal] = useState(true);\r\n  const [username, updateUsername] = useState(\"\")\r\n\r\n  //Cards hooks\r\n  const [actualTasks, updateActualTasks] = useState([])\r\n  const [nextTasks, updateNextTasks] = useState([])\r\n  const [expiredTasks, updateExpiredTasks] = useState([])\r\n\r\n  const HandleShowModal = () => {\r\n       ShowModal(false)   \r\n  }\r\n\r\n  const getCardsByUser = (username, recievedJSON) => {\r\n      //Filter the cards from the JSON by the username that's unique.\r\n\r\n     \r\n      updateUsername(username)\r\n      let userCards = []\r\n      \r\n       \r\n      for(let element of Object.values(recievedJSON.cards)){\r\n          if(element.username_card === username){\r\n\r\n            let cardPreset = {\r\n              username_card: \"\",\r\n              card_id: 0,\r\n              short_desc: \"\",\r\n              starting_time: \"\",\r\n              etc: 0,\r\n              notes: \"\",\r\n              actual_status: \"\"\r\n            }\r\n            console.log(element.username_card, element.card_id, element.short_desc, element.starting_time, element.etc)\r\n            cardPreset.username_card = element.username_card;\r\n            cardPreset.card_id = element.card_id;\r\n            cardPreset.short_desc = element.short_desc;\r\n            cardPreset.starting_time = element.starting_time;\r\n            cardPreset.etc = element.etc;\r\n            cardPreset.notes = element.notes;\r\n            cardPreset.actual_status = element.actual_status;\r\n\r\n            userCards.push(cardPreset);\r\n\r\n          }\r\n        \r\n       }   \r\n       FilterPerCategory(userCards)\r\n  }\r\n\r\n  const FilterPerCategory = (userCards) => {\r\n      let today = new Date();\r\n      let actualHour = today.getHours();\r\n      let actualMinutes = today.getMinutes();\r\n      let ActualTime = parseInt(actualHour.toString() + actualMinutes.toString());\r\n      let ETCTime = 0;\r\n\r\n\r\n      userCards.forEach(element => {\r\n\r\n          for(let [property,value] of Object.entries(element)){\r\n              if (property === \"etc\"){\r\n                ETCTime = value;\r\n              }\r\n              if(property === \"starting_time\"){\r\n                let ArraySplitted = value.split(\", \"); //Split the getted string to get only the time string with xx:xx format\r\n                let ArrayTaskTimeFullFormatString = ArraySplitted[1]; //Save the string with xx:xx format in a separate variable\r\n                let ArrayTaskTimeArray = ArrayTaskTimeFullFormatString.split(\":\"); //Save a new string with the xxxx format \r\n                let TaskTimeInNumber = parseInt(ArrayTaskTimeArray[0] + ArrayTaskTimeArray[1]) //Place the two values together into a new string and convert it to a int \r\n\r\n                /*Needs to be updated to use comparision of datetimes instead of strings*/\r\n                if(TaskTimeInNumber > (ActualTime + ETCTime)) ShowTasksNext(element); //Per next time\r\n                else if(((TaskTimeInNumber +ETCTime) >= ActualTime) && (TaskTimeInNumber <= (ActualTime + ETCTime))) ShowTasksActual(element); //Per actual time\r\n                else if (TaskTimeInNumber < ActualTime) ShowTasksExpired(element); //Per expired time \r\n              }\r\n          }\r\n      });\r\n\r\n  }\r\n\r\n  const ShowTasksNext = (card) => {\r\n    updateNextTasks(nextTasks => [...nextTasks,<Task taskname={card.short_desc} tasktime={card.starting_time} tasketc={card.etc} taskdesc={card.notes}/>])\r\n    console.log(\"The task is next\")\r\n\r\n\r\n    \r\n  }\r\n  const ShowTasksActual = (card) => {\r\n\r\n    updateActualTasks(actualTasks => [...actualTasks,<Task taskname={card.short_desc} tasktime={card.starting_time} tasketc={card.etc} taskdesc={card.notes}/>])\r\n    console.log(\"The task is Actual\")\r\n    \r\n  }\r\n\r\n  const ShowTasksExpired = (card) => {\r\n    updateExpiredTasks(expiredTasks => [...expiredTasks,<Task taskname={card.short_desc} tasktime={card.starting_time} tasketc={card.etc} taskdesc={card.notes}/>])\r\n    console.log(\"The task expired\")\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n\r\n    Modal === true ? \r\n    <UserModal HandleShowModal={HandleShowModal} sendUsername = {getCardsByUser}/>:\r\n    <React.Fragment>s\r\n        <header>\r\n            <h1>Task Manager</h1>\r\n            <p>{\"Welcome: \" + username}</p>\r\n        </header>\r\n         <main>\r\n            <AddNewTask/>\r\n            <TasksCategory categorytitle=\"Next Tasks\" task={nextTasks}/>\r\n            <TasksCategory categorytitle=\"Actual Tasks\" task={actualTasks}/>\r\n            <TasksCategory categorytitle=\"Expired Tasks\" task={expiredTasks}/>\r\n        </main> \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}