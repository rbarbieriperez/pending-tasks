{"version":3,"sources":["Components/AddNewTask/add.png","Components/AddNewTask/AddNewTask.jsx","Components/utilities/PostAPI.js","Components/TasksCategory/TasksCategory.jsx","Components/Task/Task.jsx","Components/utilities/consumeAPI.js","Components/UserModal/UserModal.jsx","App.js","reportWebVitals.js","index.js"],"names":["AddNewTask","props","useState","formVisible","isFormVisible","userID","updateUserID","taskName","createRef","taskDate","taskETC","taskDesc","useEffect","IDUser","Fragment","id","onClick","action","className","onSubmit","event","url","json","taskTemplate","String","current","value","shortDesc","startingTime","etc","Number","actualStatus","JSON","stringify","fetch","method","body","headers","then","res","catch","error","console","log","ok","alert","preventDefault","htmlFor","type","name","tabIndex","required","minLength","maxLength","placeholder","ref","src","add","alt","cols","rows","TasksCategory","categorytitle","task","Task","taskname","tasktime","tasketc","taskdesc","consumeAPI","stringURL","response","data","UserModal","sendUsername","correo","updateCorreo","inputRef","Object","keys","length","HandleShowModal","App","Modal","ShowModal","username","updateUsername","userid","actualTasks","updateActualTasks","nextTasks","updateNextTasks","expiredTasks","updateExpiredTasks","FilterPerCategory","userCards","today","Date","actualHour","getHours","actualMinutes","getMinutes","ActualTime","parseInt","toString","ETCTime","forEach","element","entries","property","ArraySplitted","split","ArrayTaskTimeFullFormatString","ArrayTaskTimeArray","TaskTimeInNumber","compareDates","ShowTasksNext","ShowTasksActual","ShowTasksExpired","dateGiven","toISOString","card","recievedJSON","nombre","apellidos","cardTemplate","cardId","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAAe,G,YAAA,IAA0B,iC,cCsE1BA,EA/DW,SAACC,GACvB,MAAqCC,mBAAS,aAA9C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA+BF,mBAAS,GAAxC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAWC,sBACXC,EAAWD,sBACXE,EAAUF,sBACVG,EAAWH,sBAQjBI,qBAAU,WACNN,EAAaL,EAAMY,UACrB,CAACZ,EAAMY,SAuBT,OACI,cAAC,IAAMC,SAAP,UACI,0BAASC,GAAG,kBAAZ,UACI,mBAAGC,QAAS,WAjCYZ,EAAb,cAAhBD,EAA2C,SAAAA,GAAW,MAAI,aAC1C,SAAAA,GAAW,MAAI,eAgC1B,0BACA,uBAAMc,OAAO,GAAGF,GAAG,YAAYG,UAAWf,EAAagB,SAzB1C,SAACC,GAEtB,IC1BgBC,EAAKC,ED0BfC,EAAe,CACjBhB,SAASiB,OAAOjB,EAASkB,QAAQC,OACjCC,UAAWH,OAAOb,EAASc,QAAQC,OACnCE,aAAcJ,OAAOf,EAASgB,QAAQC,OACtCG,IAAIC,OAAOpB,EAAQe,QAAQC,OAC3BK,aAAc,4BC/BFV,EDmCR,qDAAD,OAAsDhB,EAAtD,UCnCciB,EDmCuDU,KAAKC,UAAUV,GClC1FW,MAAMb,EAAK,CAChBc,OAAQ,OACRC,KAAMd,EACNe,QAAS,CACP,eAAe,sBAGlBC,MAAK,SAAAC,GACJ,OAAOA,KAERC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,ODyBrBH,MAAK,SAAAC,GACCA,EAAIK,IACHC,MAAM,iCAIdzB,EAAM0B,kBAOE,UACI,uBAAOC,QAAQ,WAAf,wBACA,uBAAOC,KAAK,OAAOC,KAAK,WAAWlC,GAAG,cAAcmC,SAAS,IAAIC,SAAS,WAAWC,UAAU,IAAIC,UAAU,KAAKC,YAAY,mBAAmBC,IAAKhD,IACtJ,uBAAOwC,QAAQ,WAAf,qBACA,uBAAOC,KAAK,iBAAiBC,KAAK,WAAWlC,GAAG,cAAcmC,SAAS,IAAIC,SAAS,WAAWI,IAAK9C,IACpG,uBAAOsC,QAAQ,WAAf,kBACA,uBAAOC,KAAK,OAAOC,KAAK,WAAWlC,GAAG,cAAcmC,SAAS,IAAIC,SAAS,WAAWI,IAAK7C,EAAS4C,YAAY,OAC/G,uBAAOP,QAAQ,cAAf,kBACA,iCAAQ,qBAAKS,IAAKC,EAAKC,IAAI,eAAeR,SAAS,QARvD,IAQsE,uBAClE,uBAAOH,QAAQ,WAAWhC,GAAG,iBAA7B,gCACA,0BAAUkC,KAAK,WAAWlC,GAAG,cAAc4C,KAAK,KAAKC,KAAK,IAAIV,SAAS,IAAIG,UAAU,MAAMC,YAAY,8EAA8EC,IAAK5C,aE3C/LkD,G,MAfc,SAAC5D,GAC1B,MAAwCC,mBAASD,GAAjD,6BAGA,OACI,cAAC,IAAMa,SAAP,UACI,0BAASC,GAAG,qBAAZ,UACI,6BAAKd,EAAM6D,gBACV7D,EAAM8D,YCQRC,G,MAdK,SAAC/D,GACjB,OACI,cAAC,IAAMa,SAAP,UACI,0BAASC,GAAG,iBAAZ,UACI,4BAAId,EAAMgE,WAAa,uBAD3B,IAEI,4BAAIhE,EAAMiE,WAFd,KAGI,sCAASjE,EAAMkE,WAHnB,KAII,kDAJJ,KAKI,4BAAIlE,EAAMmE,WALd,YCLCC,G,MAAa,SAAUC,GAChC,OAAOpC,MAAMoC,GACZhC,MAAK,SAAAiC,GAAQ,OAAIA,EAASjD,UAC1BgB,MAAK,SAAAkC,GAAS,OAAOA,KACrBhC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAR,yBAA8BF,SCoDnCgC,EApDU,SAACxE,EAAD,GAA2B,EAAlByE,aAAmB,IACjD,EAA+BxE,qBAA/B,mBAAOyE,EAAP,KAAcC,EAAd,KACMC,EAAWrE,sBA+BjB,OACI,cAAC,IAAMM,SAAP,UACI,0BAASC,GAAG,sBAAZ,UACI,uBAAMA,GAAG,iBAAiBI,SA3BnB,SAACC,GAEhBA,EAAM0B,iBACNuB,EAAW,4DAAD,OAA6DM,IACtErC,MAAK,SAACkC,GAE6B,IAA7BM,OAAOC,KAAKP,GAAMQ,QAVzB/E,EAAMgF,kBAYEhF,EAAMyE,aAAaF,KAEnB3B,MAAM,4BACNzB,EAAM0B,sBAgBN,UACI,uBAAOC,QAAQ,WAAf,uBACA,uBAAOC,KAAK,OAAOC,KAAK,WAAWlC,GAAG,cAAcoC,SAAS,WAAWC,UAAU,IAAIC,UAAU,KAAME,IAAOsB,EAAUnD,MAAM,6BAFjI,IAE8J,uBAC1J,wBAAQX,GAAG,kBAAkBC,QAAS,WAAO4D,EAAaC,EAASpD,QAAQC,QAA3E,uBAEJ,uBAAMT,OAAO,GAAGF,GAAG,aAAnB,UACI,uBAAOgC,QAAQ,cAAf,2BACA,uBAAOC,KAAK,OAAOC,KAAK,cAAclC,GAAG,iBAAiBoC,SAAS,WAAWC,UAAU,IAAIC,UAAU,OAF1G,IAEiH,uBAC7G,wBAAQtC,GAAG,oBAAX,+BC+GLmE,EAzJH,SAACjF,GAEX,MAA2BC,oBAAS,GAApC,mBAAOiF,EAAP,KAAcC,EAAd,KACA,EAAmClF,mBAAS,IAA5C,mBAAOmF,EAAP,KAAiBC,EAAjB,KACA,EAA+BpF,mBAAS,GAAxC,mBAAOqF,EAAP,KAAejF,EAAf,KAGA,EAAyCJ,mBAAS,IAAlD,mBAAOsF,EAAP,KAAoBC,EAApB,KACA,EAAqCvF,mBAAS,IAA9C,mBAAOwF,EAAP,KAAkBC,EAAlB,KACA,EAA2CzF,mBAAS,IAApD,mBAAO0F,EAAP,KAAqBC,EAArB,KAyCMC,EAAoB,SAACC,GACvB,IAAIC,EAAQ,IAAIC,KACZC,EAAaF,EAAMG,WACnBC,EAAgBJ,EAAMK,aACtBC,EAAaC,SAASL,EAAWM,WAAaJ,EAAcI,YAC5DC,EAAU,EAGdV,EAAUW,SAAQ,SAAAC,GACd,IAAI,IAAJ,MAA4B7B,OAAO8B,QAAQD,GAA3C,eAAoD,CAAhD,0BAAKE,EAAL,KAAcnF,EAAd,KAIA,GAHiB,QAAbmF,IACFJ,EAAU/E,GAEI,iBAAbmF,EAA4B,CAC7B,IAAIC,EAAgBpF,EAAMqF,MAAM,KAC5BC,EAAgCF,EAAc,GAC9CG,EAAqBD,EAA8BD,MAAM,KACzDG,EAAmBX,SAASU,EAAmB,GAAKA,EAAmB,IAE3EvE,QAAQC,IAAR,8BAAmCmE,EAAnC,kDAA0FE,EAA1F,uCAAsJC,EAAtJ,qCAAqMC,IAGjMC,EAAaL,EAAc,KAI1BI,EAAoBZ,EAAaG,EAFpCW,EAAcT,GAGJO,EAAkBT,GAAYH,GAAgBY,GAAqBZ,EAAaG,EAAWY,EAAgBV,GAC5GO,EAAmBZ,GAAYgB,EAAiBX,SAoBnEQ,EAAe,SAACI,GAGpB,OAAGA,GAFa,IAAItB,MAAOuB,cAAcT,MAAM,KAAK,IAUhDK,EAAgB,SAACK,GACrB9B,GAAgB,SAAAD,GAAS,4BAAQA,GAAR,CAAkB,cAAC,EAAD,CAAMzB,SAAUwD,EAAKlH,SAAU2D,SAAUuD,EAAK7F,aAAcuC,QAASsD,EAAK5F,IAAKuC,SAAUqD,EAAK9F,iBACzIe,QAAQC,IAAI,qBAKR0E,EAAkB,SAACI,GAEvBhC,GAAkB,SAAAD,GAAW,4BAAQA,GAAR,CAAoB,cAAC,EAAD,CAAMvB,SAAUwD,EAAKlH,SAAU2D,SAAUuD,EAAK7F,aAAcuC,QAASsD,EAAK5F,IAAKuC,SAAUqD,EAAK9F,iBAC/Ie,QAAQC,IAAI,uBAIR2E,EAAmB,SAACG,GACxB5B,GAAmB,SAAAD,GAAY,4BAAQA,GAAR,CAAqB,cAAC,EAAD,CAAM3B,SAAUwD,EAAKlH,SAAU2D,SAAUuD,EAAK7F,aAAcuC,QAASsD,EAAK5F,IAAKuC,SAAUqD,EAAK9F,iBAClJe,QAAQC,IAAI,qBASd,OAEY,IAAVwC,EACA,cAAC,EAAD,CAAWF,gBA5HW,WACnBG,GAAU,IA2HgCV,aAxHhB,SAACgD,GAG5B,IAH6C,EAGzC3B,EAAY,GAH6B,cAKzB2B,GALyB,IAK7C,2BAAiC,CAAC,IAAzBf,EAAwB,QAC/BrB,EAAeqB,EAAQgB,OAAS,IAAMhB,EAAQiB,WAC9CtH,EAAaqG,EAAQ5F,IACrBsD,EAAW,qDAAD,OAAsDsC,EAAQ5F,GAA9D,WACTuB,MAAK,SAAAkC,GAAS,IAAD,gBACKA,GADL,IACZ,2BAAsB,CAAC,IAAdiD,EAAa,QACpB,GAAsB,KAAlBA,EAAKlH,UAAyC,KAAtBkH,EAAK7F,aAAoB,CACnD,IAAIiG,EAAe,CACjB9F,aAAc0F,EAAK1F,aACnB+F,OAAQL,EAAKK,OACbjG,IAAK4F,EAAK5F,IACVF,UAAU8F,EAAK9F,UACfC,aAAa6F,EAAK7F,aAClBrB,SAASkH,EAAKlH,UAEhBmC,QAAQC,IAAR,8BAAmCX,KAAKC,UAAU4F,KAClD9B,EAAUgC,KAAKF,KAZP,8BAeZnF,QAAQC,IAAR,0BAA+BX,KAAKC,UAAU8D,KAC9CD,EAAkBC,OAzBuB,kCAyH/C,eAAC,IAAMjF,SAAP,WACI,mCACI,8CACA,4BAAI,YAAcuE,OAErB,iCACG,cAAC,EAAD,CAAYxE,OAAQ0E,IACpB,cAAC,EAAD,CAAezB,cAAc,aAAaC,KAAM2B,IAChD,cAAC,EAAD,CAAe5B,cAAc,eAAeC,KAAMyB,IAClD,cAAC,EAAD,CAAe1B,cAAc,gBAAgBC,KAAM6B,WChJhDoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5F,MAAK,YAAkD,IAA/C6F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.229831b1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/add.a0162b51.png\";","import React, {useState, useEffect}  from 'react';\r\nimport './AddNewTask.css';\r\nimport add from './add.png'\r\nimport { createRef } from 'react/cjs/react.production.min';\r\nimport { PostAPI } from '../utilities/PostAPI';\r\n\r\n\r\nexport const AddNewTask = (props) => {\r\n    const [formVisible, isFormVisible] = useState(\"form-hide\");\r\n    const [userID, updateUserID] = useState(0);\r\n\r\n    const taskName = createRef();\r\n    const taskDate = createRef();\r\n    const taskETC = createRef();\r\n    const taskDesc = createRef();\r\n\r\n    const HandleFormVisibility = () => {\r\n        if(formVisible === \"form-hide\") isFormVisible(formVisible => \"form-show\");\r\n        else isFormVisible(formVisible => \"form-hide\")\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        updateUserID(props.IDUser)\r\n    },[props.IDUser])\r\n\r\n    const HandleFormSubmit = (event) => {\r\n\r\n        const taskTemplate = {\r\n            taskName:String(taskName.current.value),\r\n            shortDesc: String(taskDesc.current.value),\r\n            startingTime: String(taskDate.current.value),\r\n            etc:Number(taskETC.current.value),\r\n            actualStatus: \"needs to be implemented\"\r\n        }\r\n    \r\n        //Send the data\r\n        PostAPI(`https://62423aacb6734894c14e7f14.mockapi.io/users/${userID}/cards`,JSON.stringify(taskTemplate))\r\n        .then(res =>{ \r\n            if(res.ok){\r\n                alert(\"Tarea creada con Ã©xito!\")\r\n            }\r\n            \r\n        })\r\n        event.preventDefault();\r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <section id=\"newtask-section\">\r\n                <p onClick={() => HandleFormVisibility()}>Add New Task</p>\r\n                <form action=\"\" id=\"task-form\" className={formVisible} onSubmit={HandleFormSubmit}>\r\n                    <label htmlFor=\"taskname\">Task Name:</label>\r\n                    <input type=\"text\" name=\"taskname\" id=\"taskname-id\" tabIndex=\"1\" required=\"required\" minLength=\"1\" maxLength=\"50\" placeholder=\"Take out the dog\" ref={taskName}/>\r\n                    <label htmlFor=\"taskdate\">Starts:</label>\r\n                    <input type=\"datetime-local\" name=\"taskdate\" id=\"tasktime-id\" tabIndex=\"2\" required=\"required\" ref={taskDate}/>\r\n                    <label htmlFor=\"tasktime\">ETC:</label>\r\n                    <input type=\"text\" name=\"tasktime\" id=\"tasktime-id\" tabIndex=\"3\" required=\"required\" ref={taskETC} placeholder=\"10\"/>\r\n                    <label htmlFor=\"tasktime-id\">Mins</label>\r\n                    <button><img src={add} alt=\"Add New Task\" tabIndex=\"5\"/></button> <br />\r\n                    <label htmlFor=\"taskdesc\" id=\"textarea-label\">Short Description:</label>\r\n                    <textarea name=\"taskdesc\" id=\"taskdesc-id\" cols=\"70\" rows=\"4\" tabIndex=\"4\" maxLength=\"250\" placeholder=\"Get my water bottle. Make sure to have the food in the bag. Don't forget...\" ref={taskDesc}></textarea>\r\n                </form>\r\n            </section>\r\n        </React.Fragment>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default AddNewTask;","\r\n\r\nexport const PostAPI = (url, json) => {\r\n  return fetch(url, {\r\n    method: \"POST\",\r\n    body: json,\r\n    headers: {\r\n      'Content-Type':'application/json'\r\n    }\r\n  })\r\n  .then(res => {\r\n    return res;\r\n  })\r\n  .catch(error => console.log(error))\r\n\r\n}","import React, { useState } from \"react\";\r\nimport './TasksCategory.css'\r\n\r\nexport const TasksCategory = (props) => {\r\n    const [profileState, setProfileState] = useState(props)\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <section id=\"nexttasksection-id\">\r\n                <h2>{props.categorytitle}</h2>\r\n                {props.task}\r\n            </section>\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default TasksCategory;","import React, {useState, useEffect} from \"react\";\r\nimport './Task.css';\r\n\r\n\r\n\r\nexport const Task = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <article id=\"taskarticle-id\">\r\n                <p>{props.taskname}</p><br /> {/*Task's title*/}\r\n                <p>{props.tasktime}</p>  {/*Task's time*/}\r\n                <p>ETC: {props.tasketc}</p>  {/*Task's ETC*/}\r\n                <p>Remaining Time: 0</p>  {/*Task's Remaining time*/}   \r\n                <p>{props.taskdesc}</p>  {/*Task's short desc*/}\r\n            </article>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Task;","\r\n\r\n\r\nexport const consumeAPI = function (stringURL) {\r\n    return fetch(stringURL)\r\n    .then(response => response.json())\r\n    .then(data => {return data})\r\n    .catch(error => console.log(`The error was: ${error}`))\r\n  }","import React, { useState, useEffect } from \"react\";\r\nimport AddNewTask from \"../AddNewTask/AddNewTask\";\r\nimport './UserModal.css';\r\nimport { consumeAPI } from \"../utilities/consumeAPI\";\r\nimport { createRef, useCallback, useRef } from \"react/cjs/react.production.min\";\r\n\r\n\r\nexport const UserModal = (props, {sendUsername}) => {\r\n    const [correo,updateCorreo ] = useState()     \r\n    const inputRef = createRef();\r\n\r\n    const CloseModal = () => {\r\n        props.HandleShowModal();\r\n    }\r\n\r\n\r\n    const AccessFlow = (event) => {\r\n\r\n        event.preventDefault();\r\n        consumeAPI(`https://62423aacb6734894c14e7f14.mockapi.io/users?correo=${correo}`)\r\n        .then((data) => \r\n        {\r\n            if(Object.keys(data).length !== 0){\r\n                CloseModal();\r\n                props.sendUsername(data);\r\n            } else {\r\n                alert(\"Usuario no registrado :(\")\r\n                event.preventDefault();\r\n            }\r\n            \r\n        })\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <section id=\"usermodalsection-id\">\r\n                <form id=\"currentuser-id\" onSubmit={AccessFlow}>\r\n                    <label htmlFor=\"username\">Username:</label>\r\n                    <input type=\"text\" name=\"username\" id=\"username-id\" required=\"required\" minLength=\"8\" maxLength=\"50\"  ref = {inputRef} value=\"rbarbieriperez@gmail.com\"/> <br/>\r\n                    <button id=\"accessbutton-id\" onClick={() => {updateCorreo(inputRef.current.value);}}>Access</button>\r\n                </form>\r\n                <form action=\"\" id=\"newuser-id\">\r\n                    <label htmlFor=\"newusername\">New Username:</label>\r\n                    <input type=\"text\" name=\"newusername\" id=\"newusername-id\" required=\"required\" minLength=\"8\" maxLength=\"20\"/> <br/>\r\n                    <button id=\"registerbutton-id\">Register</button>\r\n                </form>\r\n            </section>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default UserModal;","import './App.css';\r\nimport React from 'react';\r\nimport AddNewTask from './Components/AddNewTask/AddNewTask';\r\nimport TasksCategory from './Components/TasksCategory/TasksCategory';\r\nimport Task from './Components/Task/Task';\r\nimport UserModal from './Components/UserModal/UserModal';\r\nimport { useEffect, useState } from 'react';\r\nimport { consumeAPI } from './Components/utilities/consumeAPI';\r\n\r\nconst App = (props) => {\r\n  \r\n  const [Modal, ShowModal] = useState(true);\r\n  const [username, updateUsername] = useState(\"\")\r\n  const [userid, updateUserID] = useState(0);\r\n\r\n  //Cards hooks\r\n  const [actualTasks, updateActualTasks] = useState([])\r\n  const [nextTasks, updateNextTasks] = useState([])\r\n  const [expiredTasks, updateExpiredTasks] = useState([])\r\n\r\n\r\n\r\n  const HandleShowModal = () => {\r\n       ShowModal(false)   \r\n  }\r\n\r\n  const HandleReceivedUserData = (recievedJSON) => {\r\n      //Filter the cards from the JSON by the username that's unique.\r\n      \r\n      let userCards = []\r\n      \r\n      for (let element of recievedJSON){\r\n        updateUsername(element.nombre + \" \" + element.apellidos) //Updated the username to be showed on the screen\r\n        updateUserID(element.id);\r\n        consumeAPI(`https://62423aacb6734894c14e7f14.mockapi.io/users/${element.id}/cards`)\r\n        .then(data => {\r\n          for (let card of data){\r\n            if (card.taskName !== \"\" && card.startingTime !== \"\"){\r\n              let cardTemplate = {\r\n                actualStatus: card.actualStatus,\r\n                cardId: card.cardId,\r\n                etc: card.etc,\r\n                shortDesc:card.shortDesc,\r\n                startingTime:card.startingTime,\r\n                taskName:card.taskName\r\n              }\r\n              console.log(`cardTemplate tiene: ${JSON.stringify(cardTemplate)}`)\r\n              userCards.push(cardTemplate);\r\n            }\r\n          }\r\n          console.log(`userCards tiene ${JSON.stringify(userCards)}`)\r\n          FilterPerCategory(userCards)\r\n        })\r\n\r\n        \r\n      } \r\n      \r\n  }\r\n\r\n  const FilterPerCategory = (userCards) => {\r\n      let today = new Date();\r\n      let actualHour = today.getHours();\r\n      let actualMinutes = today.getMinutes();\r\n      let ActualTime = parseInt(actualHour.toString() + actualMinutes.toString());\r\n      let ETCTime = 0;\r\n\r\n\r\n      userCards.forEach(element => {\r\n          for(let [property,value] of Object.entries(element)){\r\n              if (property === \"etc\"){\r\n                ETCTime = value;\r\n              }\r\n              if(property === \"startingTime\"){\r\n                let ArraySplitted = value.split(\" \"); //Split the getted string to get only the time string with xx:xx format\r\n                let ArrayTaskTimeFullFormatString = ArraySplitted[1]; //Save the string with xx:xx format in a separate variable\r\n                let ArrayTaskTimeArray = ArrayTaskTimeFullFormatString.split(\":\"); //Save a new string with the xxxx format \r\n                let TaskTimeInNumber = parseInt(ArrayTaskTimeArray[0] + ArrayTaskTimeArray[1]) //Place the two values together into a new string and convert it to a int \r\n\r\n                console.log(`ArraySplitted tiene ${ArraySplitted} - ArrayTaskTimeFullFormatString tiene ${ArrayTaskTimeFullFormatString} - ArrayTaskTimeArray tiene ${ArrayTaskTimeArray} - TaskTimeInNumber tiene ${TaskTimeInNumber}`)\r\n\r\n\r\n                if (compareDates(ArraySplitted[0])) { //true date given is newer than the actual\r\n                  //task should be next\r\n                  ShowTasksNext(element);\r\n                } else { //task is older than actual time, we must evaluate if should be on expired tasks, actual or next depending on the time\r\n                  if(TaskTimeInNumber > (ActualTime + ETCTime)) ShowTasksNext(element); //Per next time\r\n                  else if(((TaskTimeInNumber +ETCTime) >= ActualTime) && (TaskTimeInNumber <= (ActualTime + ETCTime))) ShowTasksActual(element); //Per actual time\r\n                  else if (TaskTimeInNumber < ActualTime) ShowTasksExpired(element); //Per expired time \r\n                  \r\n                }\r\n                \r\n              }\r\n          }\r\n      });\r\n\r\n  \r\n  \r\n  \r\n  \r\n    \r\n    \r\n  \r\n  \r\n    \r\n    \r\n  }\r\n\r\n  const compareDates = (dateGiven) => {\r\n    const dateObj = new Date().toISOString().split('T')[0];\r\n\r\n    if(dateGiven > dateObj) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  \r\n  }\r\n\r\n  const ShowTasksNext = (card) => {\r\n    updateNextTasks(nextTasks => [...nextTasks,<Task taskname={card.taskName} tasktime={card.startingTime} tasketc={card.etc} taskdesc={card.shortDesc}/>])\r\n    console.log(\"The task is next\")\r\n\r\n\r\n    \r\n  }\r\n  const ShowTasksActual = (card) => {\r\n\r\n    updateActualTasks(actualTasks => [...actualTasks,<Task taskname={card.taskName} tasktime={card.startingTime} tasketc={card.etc} taskdesc={card.shortDesc}/>])\r\n    console.log(\"The task is Actual\")\r\n    \r\n  }\r\n\r\n  const ShowTasksExpired = (card) => {\r\n    updateExpiredTasks(expiredTasks => [...expiredTasks,<Task taskname={card.taskName} tasktime={card.startingTime} tasketc={card.etc} taskdesc={card.shortDesc}/>])\r\n    console.log(\"The task expired\")\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\n  \r\n\r\n  return (\r\n\r\n    Modal === true ? \r\n    <UserModal HandleShowModal={HandleShowModal} sendUsername = {HandleReceivedUserData}/>:\r\n    <React.Fragment>\r\n        <header>\r\n            <h1>Task Manager</h1>\r\n            <p>{\"Welcome: \" + username}</p>\r\n        </header>\r\n         <main>\r\n            <AddNewTask IDUser={userid}/>\r\n            <TasksCategory categorytitle=\"Next Tasks\" task={nextTasks}/>\r\n            <TasksCategory categorytitle=\"Actual Tasks\" task={actualTasks}/>\r\n            <TasksCategory categorytitle=\"Expired Tasks\" task={expiredTasks}/>\r\n        </main> \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}